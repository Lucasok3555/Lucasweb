// Back-end (Node.js + Express + Socket.IO)
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Servir HTML, CSS e JavaScript diretamente no servidor
app.get('/', (req, res) => {
    res.send(`
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat P2P com WebRTC</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
        }
        .chat-container {
            width: 400px;
            margin: auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        .chat-header {
            background: #007bff;
            color: white;
            padding: 15px;
            text-align: center;
        }
        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            border-bottom: 1px solid #ddd;
        }
        .message {
            margin: 10px 0;
        }
        .message.user {
            text-align: right;
        }
        .message.bot {
            text-align: left;
        }
        .message-content {
            display: inline-block;
            padding: 10px;
            border-radius: 20px;
            max-width: 70%;
        }
        .message.user .message-content {
            background: #dcf8c6;
        }
        .message.bot .message-content {
            background: #e9ecef;
        }
        .chat-input {
            display: flex;
            padding: 10px;
        }
        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }
        .chat-input button {
            margin-left: 10px;
            padding: 10px 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
        }
        .chat-input button:hover {
            background: #0056b3;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            Chat P2P com WebRTC
        </div>
        <div class="chat-messages" id="chatMessages">
            <!-- Mensagens serão exibidas aqui -->
        </div>
        <div class="chat-input">
            <input type="text" id="userInput" placeholder="Digite sua mensagem...">
            <button onclick="sendMessage()">Enviar</button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const peerConnection = new RTCPeerConnection();

        let dataChannel;

        // Referências aos elementos do DOM
        const messagesContainer = document.getElementById('chatMessages');
        const userInput = document.getElementById('userInput');

        // Configurar DataChannel
        peerConnection.ondatachannel = (event) => {
            dataChannel = event.channel;
            dataChannel.onmessage = (event) => {
                addMessage(event.data, 'bot');
            };
        };

        // Criar DataChannel se for o iniciador
        dataChannel = peerConnection.createDataChannel('chat');

        dataChannel.onopen = () => {
            console.log('DataChannel aberto');
        };

        dataChannel.onmessage = (event) => {
            addMessage(event.data, 'bot');
        };

        // Função para enviar mensagem
        function sendMessage() {
            const messageText = userInput.value.trim();
            if (messageText === '') return;

            dataChannel.send(messageText);
            addMessage(messageText, 'user');

            // Limpar o campo de entrada
            userInput.value = '';
        }

        // Permitir enviar mensagem ao pressionar Enter
        userInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Adicionar mensagem à tela
        function addMessage(text, sender) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', sender);

            const contentElement = document.createElement('div');
            contentElement.classList.add('message-content');
            contentElement.textContent = text;

            messageElement.appendChild(contentElement);
            messagesContainer.appendChild(messageElement);

            // Rolar para a última mensagem
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Signaling para trocar SDP e ICE Candidates
        socket.on('signal', async (data) => {
            if (data.sdp) {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
                if (data.sdp.type === 'offer') {
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit('signal', { sdp: peerConnection.localDescription });
                }
            } else if (data.candidate) {
                await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
            }
        });

        // Enviar ICE Candidates
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit('signal', { candidate: event.candidate });
            }
        };

        // Iniciar conexão
        socket.emit('signal', { sdp: peerConnection.localDescription });
    </script>
</body>
</html>
`);
});

// Lógica do servidor Socket.IO (signaling)
io.on('connection', (socket) => {
    console.log('Novo usuário conectado:', socket.id);

    // Quando um peer envia uma oferta ou resposta
    socket.on('signal', (data) => {
        socket.broadcast.emit('signal', data); // Reenvia para o outro peer
    });

    socket.on('disconnect', () => {
        console.log('Usuário desconectado:', socket.id);
    });
});

// Iniciar o servidor na porta 3000
server.listen(3000, () => {
    console.log('Servidor rodando em http://localhost:3000');
});
